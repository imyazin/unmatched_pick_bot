from dotenv import load_dotenv
import logging
import os
from typing import List, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

from system import HeroWinrateSystem


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.winrate_system = HeroWinrateSystem()
        self.user_sessions = {}  # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def create_application(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("heroes", self.list_heroes))
        application.add_handler(CommandHandler("clear", self.clear_session))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(CallbackQueryHandler(self.button_callback))

        return application

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        self.user_sessions[user_id] = {'enemy_team': []}

        welcome_text = """
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏ —Å –∫–æ–Ω—Ç—Ä–ø–∏–∫–∞–º–∏ –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ Unmatched!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ–±—â–∏–º –≤–∏–Ω—Ä–µ–π—Ç–æ–º –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≥–µ—Ä–æ–µ–≤.

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≥–µ—Ä–æ–µ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–ø-10 –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—Ä–ø–∏–∫–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏

**–ü—Ä–∏–º–µ—Ä:**
`Achilles, Ciri, Robin`
        """

        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `/heroes` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
‚Ä¢ `/clear` - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
1. –ù–∞–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
2. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –∏ –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ø-10 –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—Ä-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ `Achilles, Ciri, Robin`
‚Ä¢ `ach cir robi` (–º–æ–∂–Ω–æ –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö –∏ —á–∞—Å—Ç–∏—á–Ω–æ)

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω
‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä T. Rex –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ t.
        """

        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def list_heroes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        heroes_text = "üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:**\n\n"

        heroes_text += "\n".join(f"‚Ä¢ {hero}" for hero in self.winrate_system.hero_names)

        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(heroes_text) > 4000:
            parts = [heroes_text[i:i + 4000] for i in range(0, len(heroes_text), 4000)]
            for part in parts:
                await update.message.reply_text(part, parse_mode='Markdown')
        else:
            await update.message.reply_text(heroes_text, parse_mode='Markdown')

    async def clear_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        self.user_sessions[user_id] = {'enemy_team': []}
        await update.message.reply_text("‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.")

    def parse_hero_input(self, text: str) -> Tuple[List[str], List[str]]:
        """–ü–∞—Ä—Å–∏—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º
        if ',' in text:
            raw_names = [name.strip() for name in text.split(',')]
        else:
            raw_names = text.split()

        found_heroes = []
        not_found = []

        for raw_name in raw_names:
            if not raw_name:
                continue

            hero = self.winrate_system.find_hero_by_name(raw_name)
            if hero:
                found_heroes.append(hero)
            else:
                not_found.append(raw_name)

        return found_heroes, not_found

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {'enemy_team': []}

        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
        found_heroes, not_found = self.parse_hero_input(text)

        if not found_heroes:
            error_text = "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            if not_found:
                error_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {', '.join(not_found)}\n"
            error_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /heroes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."
            await update.message.reply_text(error_text)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        self.user_sessions[user_id]['enemy_team'] = found_heroes

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üéØ **–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:** {', '.join(found_heroes)}\n\n"

        if not_found:
            response += f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(not_found)}\n\n"

        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—Ä-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        best_counters = self.winrate_system.find_best_heroes(found_heroes, top_n=10)

        if not best_counters:
            response += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."
            await update.message.reply_text(response, parse_mode='Markdown')
            return

        response += "üèÜ **–¢–æ–ø-10 –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—Ä-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:**\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        keyboard = []
        for i, (hero, winrate) in enumerate(best_counters, 1):
            response += f"{i:2d}. **{hero}** - {winrate:.1%}\n"
            keyboard.append([InlineKeyboardButton(
                f"{i}. {hero} ({winrate:.1%})",
                callback_data=f"details_{hero}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=reply_markup)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id

        await query.answer()

        if user_id not in self.user_sessions:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        if query.data.startswith("details_"):
            hero = query.data.replace("details_", "")
            enemy_team = self.user_sessions[user_id]['enemy_team']

            details = self.winrate_system.get_hero_details(hero, enemy_team)

            detail_text = f"üìä **–î–µ—Ç–∞–ª–∏ –¥–ª—è {hero}**\n\n"
            detail_text += f"üìà **–°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç:** {details['average_winrate']:.1%}\n\n"
            detail_text += "‚öîÔ∏è **–ú–∞—Ç—á–∞–ø—ã:**\n"

            for enemy, info in details['matchups'].items():
                winrate = info['winrate']
                games = info['games']
                emoji = "üü¢" if winrate > 0.6 else "üü°" if winrate > 0.4 else "üî¥"
                detail_text += f"{emoji} vs {enemy}: {winrate:.1%} –∏–≥—Ä: {games}\n"

            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            back_keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]]
            reply_markup = InlineKeyboardMarkup(back_keyboard)

            await query.edit_message_text(detail_text, parse_mode='Markdown', reply_markup=reply_markup)

        elif query.data == "back_to_list":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            enemy_team = self.user_sessions[user_id]['enemy_team']
            best_counters = self.winrate_system.find_best_heroes(enemy_team, top_n=10)

            response = f"üéØ **–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:** {', '.join(enemy_team)}\n\n"
            response += "üèÜ **–¢–æ–ø-10 –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—Ä-–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:**\n\n"

            keyboard = []
            for i, (hero, winrate) in enumerate(best_counters, 1):
                response += f"{i:2d}. **{hero}** - {winrate:.1%}\n"
                keyboard.append([InlineKeyboardButton(
                    f"{i}. {hero} ({winrate:.1%})",
                    callback_data=f"details_{hero}"
                )])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(response, parse_mode='Markdown', reply_markup=reply_markup)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    BOT_TOKEN = os.environ["BOT_TOKEN"]

    bot = TelegramBot(BOT_TOKEN)
    application = bot.create_application()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()